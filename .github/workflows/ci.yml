name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper versioning
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test -- --watchAll=false --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: github.event_name == 'pull_request'

  auto-merge:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Auto-merge PR
      uses: fastify/github-action-merge-dependabot@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        target: main
        merge-method: squash
        merge-commit-message: |
          Release v${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}
          
          Auto-merged from PR #${{ github.event.pull_request.number }}
          Tests passed successfully âœ…

  version-and-tag:
    needs: [test, auto-merge]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Extract version from PR number
      id: version
      run: |
        PR_NUMBER=${{ github.event.pull_request.number }}
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        # Increment patch version based on PR number
        NEW_PATCH=$((PATCH + PR_NUMBER))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update package.json version
      run: |
        npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
    
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
        git push
    
    - name: Create and push tag
      run: |
        git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}: ${{ github.event.pull_request.title }}"
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        release_name: Release v${{ steps.version.outputs.new_version }}
        body: |
          ## ðŸš€ Release v${{ steps.version.outputs.new_version }}
          
          **PR #${{ steps.version.outputs.pr_number }}**: ${{ github.event.pull_request.title }}
          
          ### Changes
          ${{ github.event.pull_request.body }}
          
          ### Automated Release
          This release was automatically created after successful test execution and PR merge.
        draft: false
        prerelease: false
